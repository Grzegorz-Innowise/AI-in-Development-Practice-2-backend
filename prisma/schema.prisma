// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAuth {
  id           Int    @id @default(autoincrement())
  name         String
  email        String @unique
  passwordHash String @map("password_hash")
  refreshToken String? @unique
  refreshTokenExpiresAt DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile     User?

  @@map("user_auth") // Optional: to map the model to a different table name in the database
}

model User {
  userId   Int @id @map("user_id")
  user     UserAuth @relation(fields: [userId], references: [id], onDelete: Cascade)

  username String
  phone    String
  website  String

  address  Address?
  company  Company?

  @@map("user_app") // Optional: to map the model to a different table name in the database
  @@index([username], name: "idx_user_username") // Optional: to create an index on the username field
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  suite   String
  city    String
  zipcode String
  
  geo     Geo?   
  userId  Int    @unique @map("user_id")
  user    User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("address") // Optional: to map the model to a different table name in the database
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String
  catchPhrase String @map("catch_phrase")
  bs          String

  userId      Int     @unique @map("user_id")
  user        User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("company") // Optional: to map the model to a different table name in the database
}

model Geo {
  id      Int     @id @default(autoincrement())
  lat     String
  lng     String

  addressId  Int    @unique @map("address_id")
  address    Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("geo") // Optional: to map the model to a different table name in the database
}


